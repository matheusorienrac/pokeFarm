package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"html/template"
	"io/ioutil"
	"net/http"
	"strconv"

	_ "github.com/lib/pq"
)

var tpl *template.Template
var db *sql.DB
var err error
var currUser string // keeps track of whos currently logged in so that the create/delete/update
// functions can work properly

type Pokemon struct {
	Uid       string
	PokedexID int
	Owner     string
	Name      string
	Level     int
}

type user struct {
	username string
	password []byte
}

func init() {
	tpl = template.Must(template.ParseGlob("templates/*.gohtml"))
	postgreConnString, err := ioutil.ReadFile("postgreConnString")
	if err != nil {
		panic(err)
	}
	db, err = sql.Open("postgres", string(postgreConnString))
	if err != nil {
		panic(err)
	}
	fmt.Println("You connected to your database.")
}

func main() {
	http.HandleFunc("/pokefarm/create", create)
	http.HandleFunc("/pokefarm/read", read)
	http.HandleFunc("/pokefarm/update", update)
	http.HandleFunc("/pokefarm/delete", delete)
	http.HandleFunc("/pokefarm", pokefarm)
	http.HandleFunc("/login", login)
	http.HandleFunc("/logout", logout)
	http.HandleFunc("/signup", signup)
	http.HandleFunc("/", index)

	// imgs and css
	http.Handle("/imgs/", http.StripPrefix("/imgs/", http.FileServer(http.Dir("./imgs"))))
	http.Handle("/css/", http.StripPrefix("/css/", http.FileServer(http.Dir("./css"))))
	http.ListenAndServeTLS(":10443", "cert.pem", "key.pem", nil)
}

func index(res http.ResponseWriter, req *http.Request) {
	// if LoggedIn, redirects to My Pokedex, if not request to log in and offer sign up button
	if alreadyLoggedIn(req) {
		http.Redirect(res, req, "/pokefarm", http.StatusSeeOther)
		return
	}
	tpl.ExecuteTemplate(res, "index.gohtml", nil)
}

func create(res http.ResponseWriter, req *http.Request) {
	if req.Method != "POST" {
		tpl.ExecuteTemplate(res, "create.gohtml", nil)
		return
	}

	ID_int, ID_interr := strconv.Atoi(req.FormValue("PokedexID"))
	owner := currUser
	name := req.FormValue("Name")

	new_pkmn := Pokemon{
		Uid:       "", // we dont need it because that will be generated by postgresql
		PokedexID: ID_int,
		Owner:     owner,
		Name:      name,
		Level:     1,
	}

	// validate form values
	if ID_interr != nil {
		http.Error(res, http.StatusText(400), http.StatusBadRequest)
		return
	}

	q := `
		INSERT INTO POKEMONS(pokedexID, owner, name, level)
		VALUES($1, $2, $3, $4);
		`
	_, err = db.Exec(q, new_pkmn.PokedexID, new_pkmn.Owner, new_pkmn.Name, new_pkmn.Level)
	if err != nil {
		http.Error(res, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		res.Write([]byte(err.Error()))
		return
	} else {
		http.Redirect(res, req, "/", http.StatusSeeOther)
	}

}

func read(res http.ResponseWriter, req *http.Request) {
	if req.Method != "GET" {
		http.Error(res, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)
		return
	}

	pkmn := Pokemon{}

	uid, err := strconv.Atoi(req.FormValue("uid"))
	if err != nil {
		http.Error(res, http.StatusText(500), 500)
		return
	}
	row := db.QueryRow("SELECT * FROM pokemons WHERE uid = $1", uid)
	err = row.Scan(&pkmn.Uid, &pkmn.PokedexID, &pkmn.Owner, &pkmn.Name, &pkmn.Level)
	if err != nil {
		http.Error(res, http.StatusText(500), 500)
		return
	}
	res.Header().Set("Content-Type", "application/json")
	err = json.NewEncoder(res).Encode(pkmn)
	if err != nil {
		http.Error(res, http.StatusText(500), 500)
		return
	}
}

func update(res http.ResponseWriter, req *http.Request) {
	if req.Method != "POST" {
		tpl.ExecuteTemplate(res, "update.gohtml", nil)
		return
	}

	uid := req.FormValue("Uid")
	pokedexID, errPID := strconv.Atoi(req.FormValue("PokedexID"))
	owner := req.FormValue("Owner")
	name := req.FormValue("Name")
	level, errLVL := strconv.Atoi(req.FormValue("Level"))

	// validate form values
	if uid == "" || errPID != nil || owner == "" || name == "" || errLVL != nil {
		http.Error(res, http.StatusText(400), http.StatusBadRequest)
		return
	}

	q := `
		UPDATE pokemons SET pokedexID=$1, owner=$2, name=$3, level=$4 WHERE uid=$5;
		`
	result, err := db.Exec(q, pokedexID, owner, name, level, uid)
	if err != nil {
		panic(err)
	}
	rows, err := result.RowsAffected()
	if err != nil {
		panic(err)
	} else if rows > 0 {
		res.Write([]byte("Pokemon updated successfully."))
		fmt.Println("redirected to /pokefarm")
		http.Redirect(res, req, "/pokefarm", http.StatusSeeOther)
	} else {
		res.Write([]byte("No rows were affected."))
	}
	return

}

func delete(res http.ResponseWriter, req *http.Request) {
	if req.Method != "POST" {
		tpl.ExecuteTemplate(res, "delete.gohtml", nil)
		return
	}

	q := `
		DELETE FROM pokemons
		WHERE uid = $1;
	`
	idToDelete := req.FormValue("Uid")
	result, err := db.Exec(q, idToDelete)
	if err != nil {
		panic(err)
	}
	rows, err := result.RowsAffected()
	if err != nil {
		panic(err)
	} else if rows > 0 {
		http.Redirect(res, req, "/pokefarm", http.StatusSeeOther)
	} else {
		//instead of writing a new page with this message, use js to write in the current page?
		res.Write([]byte("No rows were affected. Id doesn't exist."))
	}
	return

}
func pokefarm(res http.ResponseWriter, req *http.Request) {
	if alreadyLoggedIn(req) {
		currUser = getCurrUser(res, req)
		q := `
		SELECT * FROM POKEMONS
		WHERE OWNER = $1
		ORDER BY POKEDEXID;
		`
		rows, err := db.Query(q, currUser)
		if err != nil {
			http.Error(res, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
			return
		}
		defer rows.Close()
		pkmns := make([]Pokemon, 0)
		for rows.Next() {
			pkmn := Pokemon{}
			err := rows.Scan(&pkmn.Uid, &pkmn.PokedexID, &pkmn.Owner, &pkmn.Name, &pkmn.Level)
			if err != nil {
				panic(err)
			}
			pkmns = append(pkmns, pkmn)
		}
		if err = rows.Err(); err != nil {
			panic(err)
		}

		//created so I can send more than just the list of pokemons to the pokefarm page
		data := struct {
			CurrUser string
			Pkmns    []Pokemon
		}{
			currUser,
			pkmns,
		}

		tpl.ExecuteTemplate(res, "pokefarm.gohtml", data)
	} else {
		http.Redirect(res, req, "/", http.StatusSeeOther)
		return
	}

}
